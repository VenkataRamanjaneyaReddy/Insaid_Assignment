# -*- coding: utf-8 -*-
"""Work.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z3fUe9p5isYwRbs8uJRzWLizCV5nLsIy
"""

from google.colab import drive
drive.mount('/content/drive')

## packages for data analysis
import pandas as pd
import numpy as np

## visualize your data
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from tabulate import tabulate

#Calling matrix for model evaluation
from sklearn.metrics import confusion_matrix, roc_curve, accuracy_score, classification_report, r2_score

#Callling traing split library
from sklearn.model_selection import train_test_split

#Importing ML algorithm libraries
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder, OneHotEncoder


from sklearn.metrics import mean_absolute_error, mean_squared_error
import random

#Calling SMOTE library
import imblearn
#Importing hyperparameter
import lightgbm as lgb 
#Hyperparameter tuning Cross validation ML library
from sklearn.linear_model import LogisticRegressionCV
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, train_test_split

df = pd.read_csv("/content/drive/MyDrive/Fraud.csv")

df.head()

df.shape

df['diffOrg'] = df['oldbalanceOrg']-df['newbalanceOrig']
df['diffDest'] = df['oldbalanceDest'] - df['newbalanceDest']

df.head()

df.shape

df.info()

df.isna().sum()

df.describe()

df.describe(include = 'all').T

df['step'].value_counts()

df['step'].unique()

df['type'].value_counts()

df['type'].unique()

df['amount'].value_counts()

df['amount'].unique()

df['nameOrig'].value_counts()

df['nameOrig'].unique()

df['oldbalanceOrg'].value_counts()

df['oldbalanceOrg'].unique()

df['newbalanceOrig'].value_counts()

df['newbalanceOrig'].unique()

df['nameDest'].value_counts()

df['nameDest'].unique()

df['oldbalanceDest'].value_counts()

df['oldbalanceDest'].unique()

df['newbalanceDest'].value_counts()

df['newbalanceDest'].unique()

df['isFraud'].value_counts()

df['isFraud'].unique()

df['isFlaggedFraud'].value_counts()

df['isFlaggedFraud'].unique()

df['diffOrg'].value_counts()

df['diffOrg'].unique()

df['diffDest'].value_counts()

df['diffDest'].unique()

plt.figure(figsize=(15,6))
sns.distplot(df['step'],bins=100)

t=pd.DataFrame(df.groupby(by=df['step'])['isFraud'].sum())
t2=t.sort_values(by='isFraud', ascending=False).head(20)
t2 = t2.rename_axis('step').reset_index()
plt.figure(figsize=(20,5))
sns.barplot(data=t2,x='step', y='isFraud',)
plt.ylabel('Fraud count by step')

sns.countplot(x='type',data=df)

sns.barplot(x='type',y='amount',data = df)

type_counts = df["type"].value_counts()

types = type_counts.index
counts = type_counts.values

# Create a pie chart to show the distribution of transaction types
fig = px.pie(
    names=types,
    values=counts,
    hole=0.5,
    title="Distribution of Transaction Types"
)

# Show the chart
fig.show()

plt.figure(figsize=(15,6))
sns.distplot(df['amount'])

sns.kdeplot(df['oldbalanceOrg'], linewidth=4)
plt.title('Distribution of transaction amount')

sns.kdeplot(df['newbalanceOrig'], linewidth=4)
plt.title('Distribution of transaction amount')

sns.kdeplot(df['oldbalanceDest'], linewidth=4)
plt.title('Distribution of transaction amount')

sns.kdeplot(df['newbalanceDest'], linewidth=4)
plt.title('Distribution of transaction amount')

sns.countplot(x='isFraud',data=df)

fraud_min_max = [
    ['amount', df.amount.min(), df.amount.max()],
    ['oldbalanceOrg', df.oldbalanceOrg.min(), df.oldbalanceOrg.max()],
    ['newbalanceOrig', df.newbalanceOrig.min(), df.newbalanceOrig.max()],
    ['oldbalanceDest', df.oldbalanceDest.min(), df.oldbalanceDest.max()],
    ['isFraud', df.isFraud.min(), df.isFraud.max()]
] 

print(
    tabulate(
        fraud_min_max,
        headers=['columns', 'min value', 'max value'],
        showindex=True,
        tablefmt='github',
        numalign='right'
    )
)

sns.kdeplot(df['diffOrg'], linewidth=4)
plt.title('Distribution of transaction amount')

sns.kdeplot(df['diffDest'], linewidth=4)
plt.title('Distribution of transaction amount')

sns.jointplot(x='step',y='amount',data=df)

# Check duplicate values
df.duplicated().sum()

fig, ax = plt.subplots(1,2,figsize=(20,5))

sns.countplot(x='type', data=df, hue='isFraud', palette='PuBu', ax=ax[0])
for container in ax[0].containers:
    ax[0].bar_label(container)
ax[0].set_title('Count plot of transaction type')
ax[0].legend(loc='best')
ax[0].set_ylabel('Number of transactions')

df2 = df.groupby(['type', 'isFraud']).size().unstack()
df2.apply(lambda x : round(x/sum(x)*100, 2), axis=1).plot(kind='barh', stacked=True, color=['lightsteelblue', 'steelblue'], ax=ax[1])
for container in ax[1].containers:
    ax[1].bar_label(container, label_type='center')
ax[1].set_title('Count plot of transaction type')
ax[1].legend(bbox_to_anchor=(1.05,1), loc='upper left')
ax[1].set_ylabel('Number of transactions')
ax[1].grid(axis='y')

df['quantity'] = pd.cut(df['amount'], 5, labels=['very low', 'low', 'moderate', 'high', 'very high'])

ax = sns.countplot(x='quantity', data=df, hue='isFraud', palette='PuBu')
for container in ax.containers:
    ax.bar_label(container)
plt.title('Count plot of amount quantity')
plt.legend(bbox_to_anchor=(1.05,1), loc='upper left')
plt.ylabel('Number of transactions')

df1 = df[df['isFraud']==1]
df2 = df1['step'].value_counts().head(10)
ax = df2.plot(kind='bar', color='lightsteelblue')
for container in ax.containers:
    ax.bar_label(container)
plt.title('Top 10 steps that often lead to fraudulent transactions')
plt.ylabel('Number of fraudulent transactions')
plt.xlabel('Step')
plt.grid(axis='x')

df['oldbalanceOrg_amt'] = pd.cut(df['oldbalanceOrg'], 5, labels=['very low', 'low', 'moderate', 'high', 'very high'])

ax = sns.countplot(x='oldbalanceOrg_amt', data=df, hue='isFraud', palette='PuBu')
for container in ax.containers:
    ax.bar_label(container)
plt.title('Count plot of initial customers pre-transaction balance amount')
plt.legend(bbox_to_anchor=(1.05,1), loc='upper left')
plt.ylabel('Number of transactions')
plt.xlabel('Initial customers pre-transaction balance amount')

df2 = df1['nameOrig'].value_counts().head(10)
ax = df2.plot(kind='bar', color='lightsteelblue')
for container in ax.containers:
    ax.bar_label(container)
plt.title('Top 10 initial customers fall for a fraudulent transactions')
plt.ylabel('Number of fraudulent transactions')
plt.xlabel('Initial customers')
plt.grid(axis='x')

del ax, df2

df2 = df1['nameDest'].value_counts().head(10)
ax = df2.plot(kind='bar', color='lightsteelblue')
for container in ax.containers:
    ax.bar_label(container)
plt.title('Top 10 recipients highly involved in fraudulent transactions')
plt.ylabel('Number of fraudulent transactions')
plt.xlabel('Recipients')
plt.grid(axis='x')

del ax, df2

df['oldbalanceDest_amt'] = pd.cut(df['oldbalanceDest'], 5, labels=['very low', 'low', 'moderate', 'high', 'very high'])

ax = sns.countplot(x='oldbalanceDest_amt', data=df, hue='isFraud', palette='PuBu')
for container in ax.containers:
    ax.bar_label(container)
plt.title('Count plot of recipients pre-transaction balance amount')
plt.legend(bbox_to_anchor=(1.05,1), loc='upper left')
plt.ylabel('Number of transactions')
plt.xlabel('Recipient pre-transaction balance amount')

df.head()

df.drop(['nameOrig', 'nameDest', 'isFlaggedFraud', 'quantity', 'oldbalanceOrg_amt', 'oldbalanceDest_amt'], axis=1, inplace = True)

df.head()

df['type'] = df['type'].map({'PAYMENT':0, 'CASH_IN':1, 'DEBIT':2, 'CASH_OUT':3, 'TRANSFER':4})

corr_matrix = df.corr('spearman')
sns.heatmap(corr_matrix, cbar=True, annot=True, mask = np.triu(np.ones_like(corr_matrix, dtype = bool)), fmt='.3f', cmap='PuBu')
plt.title('Correlation')

df.head()

df.drop(['diffOrg', 'diffDest'], axis=1, inplace = True)

df.head()

df.boxplot('isFraud')

df.boxplot('newbalanceDest')

df.boxplot('oldbalanceDest')

df.boxplot('oldbalanceOrg')

df.boxplot('newbalanceOrig')

df.boxplot('amount')

df.boxplot('step')

df.boxplot('type')

x = df.drop("isFraud", axis=1)
y = df[["isFraud"]]

x.head()

y.head()

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=42)

def plot_ROC_curve(y_test, prob):
    #Takes actual and predicted probablities as a input and plot receiver operating chracteritics 
    fpr, tpr, threshold = roc_curve(y_test, prob)
    plt.title("ROC curve plot")
    plt.plot(fpr, tpr, 'b', label="curve measure")
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.legend()
    plt.show()

def model_evaluation(test, pred):
    print("Model accuracy:\n", accuracy_score(test, pred))
    print()
    print("Confusion metrix:\n", confusion_matrix(test, pred))
    print()
    print("Classification report:\n", classification_report(test,pred))

Model = LogisticRegression()
Model.fit(x_train, y_train)

y_pred = Model.predict(x_test)
predec_prob = Model.predict_proba(x_test)[:,1]

model_evaluation(y_test, y_pred)
plot_ROC_curve(y_test, predec_prob)

Model = DecisionTreeClassifier()
Model.fit(x_train, y_train)

y_pred = Model.predict(x_test)
predec_prob = Model.predict_proba(x_test)[:,1]

model_evaluation(y_test, y_pred)
plot_ROC_curve(y_test, predec_prob)

#Initializing KNeighbors object
Model=KNeighborsClassifier(n_neighbors=20)

#Training the train data
Model.fit(x_train, np.ravel(y_train))

#Getting prediction value
y_pred = Model.predict(x_test)
#Calculating the probablity 
predec_prob = Model.predict_proba(x_test)[:,1]

#Calling model evaluation function
model_evaluation(y_test, y_pred)

#Visualizing the roc
plot_ROC_curve(y_test, predec_prob)

#Creating RFC object
Model = RandomForestClassifier(n_estimators=1)
#Training the model
Model.fit(x_train, np.ravel(y_train))
#predict the model
y_pred = Model.predict(x_test)
predec_prob = Model.predict_proba(x_test)[:,1]
#Model performance
model_evaluation(y_test, y_pred)
#Plotting the curve
plot_ROC_curve(y_test, predec_prob)

df['isFraud'].sum()/len(df)

